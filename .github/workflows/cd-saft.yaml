name: Build and deploy SAFT

on:
  push:
    branches:
      - main
      - develop

jobs:
  build-backend-image:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v1.10.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Build and push docker image
        working-directory: ./src/saft-backend
        run: ./gradlew build "-Dquarkus.profile=cd"

      - name: Store openapi manifest
        uses: actions/upload-artifact@master
        with:
          name: openapi-artifact
          path: ./src/saft-backend/target/generated/openapi.json

  build-frontend-image:
    runs-on: ubuntu-latest
    needs: [build-backend-image]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v1.10.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Load openapi manifest
        uses: actions/download-artifact@master
        with:
          name: openapi-artifact
          path: openapi/saft

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./src/saft-personal-ui/Dockerfile.remote
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/saft-ui:0.1.0

  pull-image-and-start-containers:
    runs-on: ubuntu-latest
    needs: [build-backend-image, build-frontend-image]

    steps:
      - name: Pull image and start container on remote
        uses: fifsky/ssh-action@master
        with:
          command: |
            cd ~/saft-home/SSL-SAFT-Infrastructure/remote/saft-backend
            sudo docker compose pull
            sudo docker compose up -d
          host: ${{ secrets.REMOTE_HOST }}
          user: ${{ secrets.REMOTE_USERNAME }}
          key: ${{ secrets.REMOTE_KEY }}
